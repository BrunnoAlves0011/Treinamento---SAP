*&---------------------------------------------------------------------*
*& Include          YBH_RP_03_IN_VIEW
*&---------------------------------------------------------------------*

CLASS report_view DEFINITION.

  PUBLIC SECTION.

    DATA: salv_alv TYPE REF TO cl_salv_table,
          o_events TYPE REF TO cl_salv_events_table.

    METHODS: initialization,
             selection_screen_o,
             selection_screen IMPORTING model TYPE REF TO report_model,
             end_of_selection IMPORTING model TYPE REF TO report_model,
             display_alv      IMPORTING model TYPE REF TO report_model,
             set_toolbar,
             set_fieldcat,
             set_color        IMPORTING model TYPE REF TO report_model.

ENDCLASS.

CLASS report_view IMPLEMENTATION.

  METHOD initialization.

*    filt = '@4G@ Filtros'.
*    modi = '@17@ Criação/Modificação'.
*    mod_btn = '@2L@ Salvar'.

  ENDMETHOD.

  METHOD selection_screen_o.

  ENDMETHOD.

  METHOD selection_screen.
*    CASE sy-ucomm.
*      WHEN 'MOD_REG'.
*
*        model->init_modify_met( ).
*
*      WHEN OTHERS.
*    ENDCASE.
  ENDMETHOD.

  METHOD end_of_selection.

    me->display_alv( model ).

  ENDMETHOD.

  METHOD display_alv.
    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = salv_alv
          CHANGING
            t_table      = model->it_table.

        o_events = salv_alv->get_event( ).
        SET HANDLER model->on_double_click FOR o_events.

        me->set_toolbar( ).
        me->set_fieldcat( ).
        me->set_color( model ).

        salv_alv->display( ).

      CATCH cx_salv_msg .
    ENDTRY.

*    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
*      EXPORTING
*        i_callback_program      = sy-repid
*        i_callback_user_command = 'USER_COMMAND'
*      TABLES
*        t_outtab                = model->it_table.
*
*    CASE sy-ucomm.
*      WHEN '&IC1'.
*        model->on_double_click( ).
*    ENDCASE.

  ENDMETHOD.

  METHOD set_toolbar.

    DATA: functions TYPE REF TO cl_salv_functions_list.
    functions = salv_alv->get_functions( ).
    functions->set_default( ).

  ENDMETHOD.

  METHOD set_fieldcat.

    DATA: columns TYPE REF TO cl_salv_columns_table,
          column  TYPE REF TO cl_salv_column.

    columns = salv_alv->get_columns( ).

*    columns->set_optimize( abap_true ).

*   Renomeia as colunas do relatorio alv com os nomes propostos
*    column = columns->get_column( 'LIFNR' ).
*    column->set_long_text( 'Vendedor' ).

    column = columns->get_column( 'BRGEW' ).
    column->set_long_text( 'Quantidade (KG)' ).

    column = columns->get_column( 'NETWR' ).
    column->set_long_text( 'Valor Total (R$)' ).

    column = columns->get_column( 'MES' ).
    column->set_long_text( 'Mês' ).

    column = columns->get_column( 'ANO' ).
    column->set_long_text( 'Ano' ).

*   Tira da visualização as colunas DATA e ERDAT
    column = columns->get_column( 'DATA' ).
    column->set_visible( abap_false ).
    column = columns->get_column( 'ERDAT' ).
    column->set_visible( abap_false ).

  ENDMETHOD.

  METHOD set_color.

    LOOP AT model->it_table ASSIGNING FIELD-SYMBOL(<f>).
        <f>-color = VALUE #( fname = 'BRGEW' ( color-col = 3
                               color-int = 0
                               color-inv = 0 ) ).
    ENDLOOP.

    salv_alv->get_columns( )->set_color_column( 'COLOR' ).

  ENDMETHOD.

ENDCLASS.