*&---------------------------------------------------------------------*
*& Include          YDESAFIOYUYU_BH_IN_MODEL
*&---------------------------------------------------------------------*

CLASS report_model DEFINITION.

  PUBLIC SECTION.

    TYPE-POOLS: slis.

    TYPES: BEGIN OF ty_table,
             lifnr TYPE ekko-lifnr,
             ebeln TYPE ekko-ebeln,
             ebelp TYPE ekpo-ebelp,
           END OF ty_table.

    TYPES: BEGIN OF ty_saida,
             aedat TYPE ekko-aedat,
             ebeln TYPE ekko-ebeln,
             ebelp TYPE ekpo-ebelp,
             werks TYPE ekpo-werks,
             lgort TYPE ekpo-lgort,
             meins TYPE ekpo-meins,
             menge TYPE ekpo-menge,
             matnr TYPE ekpo-matnr,
           END OF ty_saida.

    DATA: p_month  TYPE string,
          p_year   TYPE string,
          t_events TYPE slis_t_event.

    DATA: it_table TYPE TABLE OF ty_table,
          st_table TYPE ty_table,
          tree     TYPE TABLE OF ty_table,
          it_saida TYPE TABLE OF ty_saida,
          st_saida TYPE ty_saida.

    DATA: lo_nodes TYPE REF TO cl_salv_nodes,
          lt_nodes TYPE salv_t_nodes,
          lo_item  TYPE REF TO cl_salv_item,
          lv_set   TYPE xfeld,
          lv_value TYPE salv_de_constant.

    DATA: o_salve  TYPE REF TO cl_salv_table,
          o_select TYPE REF TO cl_salv_selections,
          l_row    TYPE salv_s_cell,
          o_row    TYPE i.

    DATA: ls_mmdochdr TYPE bapi2017_gm_head_01,
          lt_gm       TYPE STANDARD TABLE OF bapi2017_gm_item_create,
          ls_gm       TYPE bapi2017_gm_item_create,
          lt_ret      TYPE STANDARD TABLE OF bapiret2,
          ls_ret      TYPE bapiret2,
          ls_hdr      TYPE bapi2017_gm_head_ret,
          lt_matdoc   TYPE bapi2017_gm_head_ret-mat_doc,
          lt_docyear  TYPE bapi2017_gm_head_ret-doc_year,
          lt_gm_ret   TYPE STANDARD TABLE OF bapi2017_gm_head_02,
          ls_gm_ret   TYPE bapi2017_gm_head_02.

    METHODS: start_of_selection,
             get_pedido,
             init_modify_met,
             validate_miro,
             validate_migo,
             criar_migo,
             criar_miro,
             estornar_migo,
             estornar_miro,
             added_function   FOR EVENT added_function OF cl_salv_events_tree
                              IMPORTING e_salv_function,
             mensagens IMPORTING valor TYPE c.

ENDCLASS.

CLASS report_model IMPLEMENTATION.

  METHOD start_of_selection.

    me->get_pedido( ).

  ENDMETHOD.

  METHOD get_pedido.

    SELECT ekko~aedat, ekko~ebeln, ekpo~ebelp, ekpo~werks, ekpo~lgort, ekpo~meins, ekpo~menge, ekpo~matnr
      FROM ekpo
      INNER JOIN ekko ON ekko~ebeln = ekpo~ebeln
      WHERE ekko~aedat IN @fil_per
      AND   ekpo~ebelp IN @fil_ped
      AND   ekpo~werks <> ''
      AND   ekpo~lgort <> ''
      AND   ekko~lifnr <> ''
      INTO CORRESPONDING FIELDS OF TABLE @it_saida.

    SELECT ekko~ebeln, ekpo~ebelp, ekko~lifnr
      FROM ekko
      INNER JOIN ekpo ON ekpo~ebeln = ekko~ebeln
      WHERE ekko~aedat IN @fil_per
      AND   ekpo~ebelp IN @fil_ped
      AND   ekpo~werks <> ''
      AND   ekpo~lgort <> ''
      AND   ekko~lifnr <> ''
      INTO CORRESPONDING FIELDS OF TABLE @it_table UP TO 100 ROWS.

*    me->loop_data( ).
*    me->loop_icon( ).

  ENDMETHOD.

  METHOD init_modify_met.

*    me->validate_migo( ).
*    me->validate_miro( ).
*    me->criar_migo( ).
*    me->criar_miro( ).
*    me->modify_reg( ).

  ENDMETHOD.

  METHOD validate_miro.

  ENDMETHOD.

  METHOD validate_migo.

  ENDMETHOD.

  METHOD estornar_migo.

    DATA: lv_return.
    DATA: lt_fields TYPE TABLE OF sval,
          st_fields TYPE sval.

    DATA: valorm TYPE ekpo-matnr,
          valord TYPE ekpo-aedat.

    CLEAR: ls_gm_ret, valorm, valord.

    st_fields-tabname = 'EKPO'.
    st_fields-fieldname = 'MATNR'.
    APPEND st_fields TO lt_fields.

    st_fields-tabname = 'EKKO'.
    st_fields-fieldname = 'AEDAT'.
    APPEND st_fields TO lt_fields.

    CALL FUNCTION 'POPUP_GET_VALUES'
      EXPORTING
        popup_title = 'Estornar Migo'
      IMPORTING
        returncode  = lv_return
      TABLES
        fields      = lt_fields.

    READ TABLE lt_fields INTO st_fields INDEX 1.
    valorm = st_fields-value.

    READ TABLE lt_fields INTO st_fields INDEX 2.
    valord = st_fields-value.

    CLEAR: ls_gm_ret.

*    READ TABLE it_saida INTO st_saida INDEX row.
    LOOP AT it_saida INTO st_saida.
      IF st_saida-matnr = valorm AND st_saida-aedat = valord.
        ls_gm_ret-mat_doc = st_saida-matnr.
        ls_gm_ret-doc_year = st_saida-aedat(4).
        APPEND ls_gm_ret TO lt_gm_ret.
      ELSE.
        CONTINUE.
      ENDIF.
    ENDLOOP.

    CALL FUNCTION 'BAPI_GOODSMVT_CANCEL'
      EXPORTING
        materialdocument          = ls_gm_ret-mat_doc
        matdocumentyear           = ls_gm_ret-doc_year
      TABLES
        return                    = lt_ret.

    READ TABLE lt_ret INTO ls_ret INDEX 1.
    DATA(mensagem) = ls_ret-message.
    MESSAGE mensagem TYPE 'I'.

  ENDMETHOD.

  METHOD estornar_miro.
*    UTILIZE O SHDB, TRANSAÇÃO MR8M
  ENDMETHOD.

  METHOD criar_migo.

    DATA: lv_return.
    DATA: lt_fields TYPE TABLE OF sval,
          st_fields TYPE sval.
    DATA: valor  TYPE ekpo-ebeln.

    CLEAR: ls_gm, valor, ls_mmdochdr.

    st_fields-tabname = 'EKPO'.
    st_fields-fieldname = 'EBELN'.
    APPEND st_fields TO lt_fields.

    CALL FUNCTION 'POPUP_GET_VALUES'
      EXPORTING
        popup_title = 'Gerar Migo'
      IMPORTING
        returncode  = lv_return
      TABLES
        fields      = lt_fields.
    READ TABLE lt_fields INTO st_fields INDEX 1.
    valor = st_fields-value.
    CLEAR: ls_gm.
    IF lv_return EQ 'A'.
      me->mensagens( 'E' ).
      EXIT.
    ELSE.

      LOOP AT it_saida INTO st_saida.
        IF st_saida-ebeln = valor.
          ls_gm-po_item   = st_saida-ebelp.
          ls_gm-entry_qnt = st_saida-menge.
          ls_gm-entry_uom = st_saida-meins.
          ls_gm-stge_loc  = st_saida-lgort.
          ls_gm-plant     = st_saida-werks.
          ls_gm-material  = st_saida-matnr.
          ls_gm-po_number = valor.
          ls_gm-move_type = '101'.
          ls_gm-mvt_ind   = 'B'.
          APPEND ls_gm TO lt_gm.
        ELSE.
          CONTINUE.
        ENDIF.
      ENDLOOP.

    ENDIF.

    ls_mmdochdr-pstng_date = '20240201'.
    ls_mmdochdr-doc_date   = '20240201'.
    ls_mmdochdr-pr_uname   = sy-uname.

    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_mmdochdr
        goodsmvt_code    = '01'
*       testrun          = 'X'
      IMPORTING
        materialdocument = lt_matdoc
        matdocumentyear  = lt_docyear
      TABLES
        goodsmvt_item    = lt_gm
        return           = lt_ret.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

    READ TABLE lt_ret INTO ls_ret INDEX 1.
    DATA(mensagem) = ls_ret-message.
    MESSAGE mensagem TYPE 'I'.


  ENDMETHOD.

  METHOD criar_miro.
*         GERAR MIRO
*AO CLICAR, O PROGRAMA DEVERÁ BUSCAR SE O PEDIDO JÁ TEM UMA MIGO CRIADA E NÃO ESTORNADA, E EXECUTAR
*A BAPI (BAPI_INCOMINGINVOICE_CREATE) PARA GERAÇÃO DA CONFIRMAÇÃO DE FATURA. TRATAR AS
*MENSAGENS RETORNADAS NA TABELA BAPIRET2 DA BAPI EM UMA POPUP DE MENSAGENS, EXIBINDO A LISTA DOS
*ERROS/MENSAGENS QUE RETORNARAM.
    me->validate_miro( ).

*CALL FUNCTION 'BAPI_INCOMINGINVOICE_CREATE'
*  EXPORTING
*    headerdata                =
**   ADDRESSDATA               =
** IMPORTING
**   INVOICEDOCNUMBER          =
**   FISCALYEAR                =
*  tables
*    itemdata                  =
**   ACCOUNTINGDATA            =
**   GLACCOUNTDATA             =
**   MATERIALDATA              =
**   TAXDATA                   =
**   WITHTAXDATA               =
**   VENDORITEMSPLITDATA       =
*    return                    =
**   EXTENSIONIN               =
**   TM_ITEMDATA               =
**   NFMETALLITMS              =
**   ASSETDATA                 =
*          .

  ENDMETHOD.

  METHOD added_function.

    CASE e_salv_function.
      WHEN 'MIGO1'.
        me->criar_migo( ).
      WHEN 'MIRO1'.
        me->criar_miro( ).
      WHEN 'MIGO2'.
        me->estornar_migo( ).
      WHEN 'MIRO2'.
        me->estornar_miro( ).
      WHEN 'BACK'.
        LEAVE PROGRAM.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.

  METHOD mensagens.

    CASE valor.
      WHEN 'A'.
        MESSAGE 'Sucesso!' TYPE 'I' DISPLAY LIKE 'S'.
      WHEN 'E'.
        MESSAGE 'Erro!' TYPE 'I' DISPLAY LIKE 'E'.
      WHEN OTHERS.

    ENDCASE.

  ENDMETHOD.

ENDCLASS.