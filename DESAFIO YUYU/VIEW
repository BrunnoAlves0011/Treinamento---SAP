*&---------------------------------------------------------------------*
*& Include          YDESAFIOYUYU_BH_IN_VIEW
*&---------------------------------------------------------------------*

CLASS report_view DEFINITION.

  PUBLIC SECTION.

    DATA: salv_alv TYPE REF TO cl_salv_table,
          o_events TYPE REF TO cl_salv_events_table.

    DATA: lo_nodes      TYPE REF TO cl_salv_nodes,
          lo_node       TYPE REF TO cl_salv_node,
          salv_settings TYPE REF TO cl_salv_tree_settings,
          o_events_tree TYPE REF TO cl_salv_events_tree.

    DATA: texto TYPE lvc_value,
          key   TYPE salv_de_node_key,
          tipo1 TYPE ekpo-ebelp.

    METHODS: initialization,
             selection_screen_o IMPORTING model TYPE REF TO report_model,
             selection_screen   IMPORTING model TYPE REF TO report_model,
             end_of_selection   IMPORTING model TYPE REF TO report_model,
             display_tree       IMPORTING model TYPE REF TO report_model,
             const_tree         IMPORTING model TYPE REF TO report_model,
             eventos_alv        IMPORTING model TYPE REF TO report_model,
             preencher_tree     IMPORTING model TYPE REF TO report_model,
             set_toolbar,
             set_fieldcat       IMPORTING model    TYPE REF TO report_model,
             add_node           IMPORTING node_key TYPE salv_de_node_key
                                   tipo     TYPE ekpo-ebeln
                                   model    TYPE REF TO report_model.

ENDCLASS.

CLASS report_view IMPLEMENTATION.

  METHOD initialization.

*    filt = '@4G@ Filtros'.
*    modi = '@17@ Criação/Modificação'.
*    mod_btn = '@2L@ Salvar'.

  ENDMETHOD.

  METHOD selection_screen_o.

  ENDMETHOD.

  METHOD selection_screen.
*    CASE sy-ucomm.
*      WHEN 'MOD_REG'.
*
*        model->init_modify_met( ).
*
*      WHEN OTHERS.
*    ENDCASE.
  ENDMETHOD.

  METHOD end_of_selection.

    me->eventos_alv( model ).
    me->const_tree( model ).

  ENDMETHOD.

  METHOD const_tree.
    TRY.
        CALL METHOD cl_salv_tree=>factory
          IMPORTING
            r_salv_tree = salv_tree
          CHANGING
            t_table     = model->tree.
      CATCH cx_salv_error .
        LEAVE LIST-PROCESSING.
    ENDTRY.

    me->preencher_tree( model ).
    me->display_tree( model ).

  ENDMETHOD.

  METHOD display_tree.

    salv_settings = salv_tree->get_tree_settings( ).

    salv_settings->set_header( 'Relatorio Migo - Miro' ).
    salv_settings->set_hierarchy_header( 'Fornecedor' ).
    salv_settings->set_hierarchy_size( 50 ).

    salv_tree->set_screen_status( pfstatus = 'ZSTATUS'
                                  report = sy-repid
                                  set_functions = salv_tree->c_functions_all ).

    o_events_tree = salv_tree->get_event( ).
    SET HANDLER model->added_function for o_events_tree.

    salv_tree->display( ).

  ENDMETHOD.

  METHOD preencher_tree.
    TRY .
        lo_nodes = salv_tree->get_nodes( ).
        LOOP AT model->it_table INTO model->st_table.

          texto = |Fornecedor { model->st_table-lifnr }|.
          lo_node = lo_nodes->add_node( related_node = ''
                                        text = texto
                                        relationship = '' ).
          key = lo_node->get_key( ).

          tipo1 = model->st_table-ebelp.

          me->add_node( node_key = key
                        tipo = model->st_table-ebeln
                        model = model ).

        ENDLOOP.
      CATCH cx_salv_msg.
        LEAVE LIST-PROCESSING.
    ENDTRY.

  ENDMETHOD.

  METHOD add_node.
    DATA: prev TYPE ekpo-ebeln.
    LOOP AT model->it_table INTO model->st_table WHERE ebeln = tipo.

      texto = |Pedido { model->st_table-ebeln }|.

      lo_node = lo_nodes->add_node( related_node = node_key
                                    text = texto
                                    relationship = cl_gui_column_tree=>relat_first_child
                                    data_row = model->st_table ).

      key = lo_node->get_key( ).
      LOOP AT model->it_table INTO model->st_table WHERE ebelp = tipo1.
        texto = |Item Do Pedido { model->st_table-ebelp }|.
        lo_node = lo_nodes->add_node( related_node = node_key
                                      text = texto
                                      relationship = cl_gui_column_tree=>relat_last_child ).
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.

  METHOD set_toolbar.

*    DATA: functions TYPE REF TO cl_salv_functions_list.
*    functions = salv_alv->get_functions( ).
*    functions->set_default( ).

  ENDMETHOD.

  METHOD set_fieldcat.

  ENDMETHOD.

  METHOD eventos_alv.

*    FIELD-SYMBOLS: <f_events> TYPE slis_alv_event.
*    CLEAR: model->t_events.
*
*    CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
**    EXPORTING
**      i_list_type = 0
*      IMPORTING
*        et_events = model->t_events.
*
*    IF sy-subrc EQ 0.
*
*      READ TABLE model->t_events WITH KEY name = slis_ev_user_command
*                                                 ASSIGNING <f_events>.
*      IF sy-subrc EQ 0.
*        <f_events>-form = 'USER_COMMAND'.
*      ENDIF.
*
*    ENDIF.

  ENDMETHOD.

ENDCLASS.