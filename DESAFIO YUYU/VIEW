*&---------------------------------------------------------------------*
*& Include          YDESAFIOYUYU_BH_IN_VIEW
*&---------------------------------------------------------------------*

CLASS report_view DEFINITION.

  PUBLIC SECTION.

    DATA: salv_alv TYPE REF TO cl_salv_table,
          o_events TYPE REF TO cl_salv_events_table.

    METHODS: initialization,
             selection_screen_o,
             selection_screen   IMPORTING model TYPE REF TO report_model,
             end_of_selection   IMPORTING model TYPE REF TO report_model,
             display_alv        IMPORTING model TYPE REF TO report_model,
             eventos_alv      IMPORTING model TYPE REF TO report_model,
             set_toolbar,
             set_fieldcat       IMPORTING model TYPE REF TO report_model.

ENDCLASS.

CLASS report_view IMPLEMENTATION.

  METHOD initialization.

*    filt = '@4G@ Filtros'.
*    modi = '@17@ Criação/Modificação'.
*    mod_btn = '@2L@ Salvar'.

  ENDMETHOD.

  METHOD selection_screen_o.

  ENDMETHOD.

  METHOD selection_screen.
*    CASE sy-ucomm.
*      WHEN 'MOD_REG'.
*
*        model->init_modify_met( ).
*
*      WHEN OTHERS.
*    ENDCASE.
  ENDMETHOD.

  METHOD end_of_selection.

    me->eventos_alv( model ).
    me->display_alv( model ).

  ENDMETHOD.

  METHOD display_alv.
    TRY.
      CALL METHOD cl_salv_table=>factory
      IMPORTING
        r_salv_table = salv_alv
      CHANGING
        t_table      = model->it_table.

      salv_alv->set_screen_status(
      EXPORTING
        REPORT        = sy-repid               " ABAP Program: Current Master Program
        pfstatus      = 'ZSTATUS'               " Screens, Current GUI Status
        set_functions = cl_salv_table=>c_functions_all " ALV: Data Element for Constants
        ).

*         me->set_fieldcat( ).
*         me->set_toolbar( ).
      o_events = salv_alv->get_event( ).
      SET HANDLER model->added_function FOR o_events.
        salv_alv->display( ).

      CATCH cx_salv_msg .
    ENDTRY.

  ENDMETHOD.

  METHOD set_toolbar.

*    DATA: functions TYPE REF TO cl_salv_functions_list.
*    functions = salv_alv->get_functions( ).
*    functions->set_default( ).

  ENDMETHOD.

  METHOD set_fieldcat.

  ENDMETHOD.

  METHOD eventos_alv.

    FIELD-SYMBOLS: <f_events> TYPE slis_alv_event.
    CLEAR: model->t_events.

    CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
*    EXPORTING
*      i_list_type = 0
    IMPORTING
      et_events   = model->t_events.

    IF sy-subrc EQ 0.

      READ TABLE model->t_events WITH KEY name = slis_ev_user_command
                                                 ASSIGNING <f_events>.
      IF sy-subrc EQ 0.
        <f_events>-form = 'USER_COMMAND'.
      ENDIF.

    ENDIF.

  ENDMETHOD.

ENDCLASS.